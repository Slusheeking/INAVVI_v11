name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      deploy_target:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

jobs:
  verify:
    name: Verify Production Readiness
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-asyncio

      - name: Verify production readiness
        run: |
          chmod +x verify_production_readiness.sh
          ./verify_production_readiness.sh

  test:
    name: Run Tests
    needs: verify
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-asyncio

      - name: Run unit tests
        run: |
          python -m pytest tests/unit/

  frontend-test:
    name: Frontend Tests
    needs: verify
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Setup frontend environment
        run: |
          cd frontend
          python -m venv venv
          source venv/bin/activate
          pip install -r requirements.txt

      - name: Test frontend setup
        run: |
          cd frontend
          source venv/bin/activate
          python test_frontend_setup.py

      - name: Verify frontend templates
        run: |
          cd frontend
          source venv/bin/activate
          python -c "import os; assert os.path.exists('templates/index.html'), 'Frontend template not found'"

  monitoring-test:
    name: Monitoring System Tests
    needs: verify
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-asyncio prometheus_client redis

      - name: Test monitoring system
        run: |
          python -c "import monitoring_system.monitoring_system; print('Monitoring system module imported successfully')"
          python test_prometheus.py

      - name: Verify Prometheus configuration
        run: |
          test -f prometheus/prometheus.yml || (echo "Prometheus configuration not found" && exit 1)
          grep -q "job_name: 'redis'" prometheus/prometheus.yml || (echo "Redis job not configured in Prometheus" && exit 1)

  build:
    name: Build Docker Image
    needs: [test, frontend-test, monitoring-test]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile.unified
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            inavvi/trading-system:latest
            inavvi/trading-system:${{ github.sha }}
          cache-from: type=registry,ref=inavvi/trading-system:buildcache
          cache-to: type=registry,ref=inavvi/trading-system:buildcache,mode=max

  deploy-staging:
    name: Deploy to Staging
    needs: build
    if: github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.deploy_target == 'staging')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy to staging server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.STAGING_SERVER_HOST }}
          username: ${{ secrets.STAGING_SERVER_USER }}
          key: ${{ secrets.STAGING_SERVER_KEY }}
          script: |
            cd /opt/inavvi
            docker-compose -f docker-compose.unified.yml down
            docker pull inavvi/trading-system:${{ github.sha }}
            echo "POLYGON_API_KEY=${{ secrets.API_KEY_POLYGON }}" > .env
            echo "UNUSUAL_WHALES_API_KEY=${{ secrets.API_KEY_UNUSUAL_WHALES }}" >> .env
            echo "ALPACA_API_KEY=${{ secrets.API_KEY_ALPACA }}" >> .env
            echo "ALPACA_API_SECRET=${{ secrets.API_SECRET_ALPACA }}" >> .env
            echo "ALPACA_API_URL=${{ secrets.API_URL_ALPACA }}" >> .env
            echo "REDIS_PASSWORD=${{ secrets.REDIS_AUTH_PASSWORD }}" >> .env
            echo "USE_GPU=true" >> .env
            docker-compose -f docker-compose.unified.yml up -d
            ./manage_production.sh start
            
            # Verify frontend is running
            curl -s http://localhost:5000 > /dev/null || (echo "Frontend not running" && exit 1)
            echo "Frontend is running on port 5000"
            
            # Verify monitoring is running
            curl -s http://localhost:9090 > /dev/null || (echo "Prometheus not running" && exit 1)
            echo "Prometheus monitoring is running on port 9090"

  deploy-production:
    name: Deploy to Production
    needs: deploy-staging
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.deploy_target == 'production'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy to production server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PRODUCTION_SERVER_HOST }}
          username: ${{ secrets.PRODUCTION_SERVER_USER }}
          key: ${{ secrets.PRODUCTION_SERVER_KEY }}
          script: |
            cd /opt/inavvi
            # Create backup before deployment
            ./backup_production_data.sh
            docker-compose -f docker-compose.unified.yml down
            docker pull inavvi/trading-system:${{ github.sha }}
            echo "POLYGON_API_KEY=${{ secrets.API_KEY_POLYGON }}" > .env
            echo "UNUSUAL_WHALES_API_KEY=${{ secrets.API_KEY_UNUSUAL_WHALES }}" >> .env
            echo "ALPACA_API_KEY=${{ secrets.API_KEY_ALPACA }}" >> .env
            echo "ALPACA_API_SECRET=${{ secrets.API_SECRET_ALPACA }}" >> .env
            echo "ALPACA_API_URL=${{ secrets.API_URL_ALPACA }}" >> .env
            echo "REDIS_PASSWORD=${{ secrets.REDIS_AUTH_PASSWORD }}" >> .env
            echo "USE_GPU=true" >> .env
            docker-compose -f docker-compose.unified.yml up -d
            ./manage_production.sh start
            
            # Verify frontend is running
            curl -s http://localhost:5000 > /dev/null || (echo "Frontend not running" && exit 1)
            echo "Frontend is running on port 5000"
            
            # Verify monitoring is running
            curl -s http://localhost:9090 > /dev/null || (echo "Prometheus not running" && exit 1)
            echo "Prometheus monitoring is running on port 9090"
            
            # Run comprehensive monitoring check
            ./monitor_production.sh