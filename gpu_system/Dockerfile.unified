# Pull the latest TensorFlow container with CUDA 12.3 support
FROM nvcr.io/nvidia/tensorflow:23.12-tf2-py3

# Install required system packages including Redis and Prometheus
# Install system packages
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    wget \
    python3-dev \
    redis-server \
    prometheus \
    prometheus-node-exporter \
    supervisor \
    && rm -rf /var/lib/apt/lists/*

# Install Redis Exporter
RUN wget https://github.com/oliver006/redis_exporter/releases/download/v1.54.0/redis_exporter-v1.54.0.linux-arm64.tar.gz && \
    tar xzf redis_exporter-v1.54.0.linux-arm64.tar.gz && \
    mv redis_exporter-v1.54.0.linux-arm64/redis_exporter /usr/local/bin/ && \
    rm -rf redis_exporter-v1.54.0.linux-arm64*

# Set environment variables for CUDA 12.3 and GH200 optimization
ENV LD_LIBRARY_PATH=/usr/local/nvidia/lib:/usr/local/nvidia/lib64:${LD_LIBRARY_PATH}
ENV CUDA_HOME=/usr/local/cuda
ENV PATH=${CUDA_HOME}/bin:${PATH}

# Enhanced TF32 acceleration and GPU optimization
ENV NVIDIA_TF32_OVERRIDE="1"
ENV CUDA_DEVICE_MAX_CONNECTIONS="32"
ENV TF_FORCE_UNIFIED_MEMORY="1"
ENV TF_ENABLE_NUMA_AWARE_ALLOCATORS="1"
ENV NVIDIA_VISIBLE_DEVICES=all
ENV NVIDIA_DRIVER_CAPABILITIES=compute,utility
ENV TF_FORCE_GPU_ALLOW_GROWTH=true
ENV TF_XLA_FLAGS="--tf_xla_auto_jit=2 --tf_xla_cpu_global_jit"
ENV TF_CUDA_HOST_MEM_LIMIT_IN_MB=80000
ENV TF_GPU_THREAD_MODE=gpu_private
ENV TF_GPU_THREAD_COUNT=8
ENV TF_GPU_ALLOCATOR=cuda_malloc_async
ENV TF_USE_CUDA_GRAPHS=0
ENV XLA_FLAGS="--xla_gpu_cuda_data_dir=/usr/local/cuda"
ENV TF_CUDNN_USE_AUTOTUNE=1
ENV TF_LAYOUT_OPTIMIZER_DISABLE=1
ENV TF_ENABLE_ONEDNN_OPTS=0
ENV CUDA_AUTO_BOOST="1"
ENV NCCL_IB_DISABLE="0"
ENV NCCL_P2P_LEVEL="NVL"
ENV GOMP_CPU_AFFINITY="0-71"
ENV MALLOC_TRIM_THRESHOLD_="0"
ENV MALLOC_MMAP_THRESHOLD_="131072"

# Install additional Python packages
RUN pip install --upgrade pip && pip install --no-cache-dir \
    pandas \
    matplotlib \
    scikit-learn==1.3.2 \
    pyarrow==14.0.1 \
    numba>=0.57.0 \
    requests \
    redis \
    urllib3 \
    jupyterlab \
    cupy-cuda12x \
    pycuda \
    polygon-api-client \
    nvidia-ml-py3 \
    ipywidgets \
    alpaca-trade-api \
    packaging \
    pytz \
    aiohttp \
    xgboost \
    schedule \
    slack-sdk \
    prometheus_client \
    websockets

# Create working directories
WORKDIR /app
RUN mkdir -p /app/models /app/data /app/logs /app/config

# Copy configuration files
COPY prometheus/prometheus.yml /etc/prometheus/prometheus.yml
COPY redis/redis.conf /etc/redis/redis.conf

# Configure supervisord to manage services
COPY <<EOF /etc/supervisor/conf.d/services.conf
[supervisord]
nodaemon=true

[program:redis]
command=/usr/bin/redis-server /etc/redis/redis.conf
autostart=true
autorestart=true
stderr_logfile=/var/log/redis/redis-server.err.log
stdout_logfile=/var/log/redis/redis-server.out.log

[program:prometheus]
command=/usr/bin/prometheus --config.file=/etc/prometheus/prometheus.yml --storage.tsdb.path=/prometheus
autostart=true
autorestart=true
stderr_logfile=/var/log/prometheus.err.log
stdout_logfile=/var/log/prometheus.out.log

[program:redis_exporter]
command=/usr/local/bin/redis_exporter
autostart=true
autorestart=true
stderr_logfile=/var/log/redis_exporter.err.log
stdout_logfile=/var/log/redis_exporter.out.log

[program:jupyter]
command=jupyter lab --ip=0.0.0.0 --port=8888 --no-browser --allow-root --NotebookApp.token=''
autostart=true
autorestart=true
stderr_logfile=/var/log/jupyter.err.log
stdout_logfile=/var/log/jupyter.out.log
EOF

# Create directories and set permissions for Redis and other services
RUN mkdir -p /var/log/redis && \
    mkdir -p /var/log/prometheus && \
    mkdir -p /var/run/redis && \
    mkdir -p /data && \
    touch /var/log/redis/redis-server.err.log && \
    touch /var/log/redis/redis-server.out.log && \
    touch /var/log/prometheus.err.log && \
    touch /var/log/prometheus.out.log && \
    touch /var/log/redis_exporter.err.log && \
    touch /var/log/redis_exporter.out.log && \
    touch /var/log/jupyter.err.log && \
    touch /var/log/jupyter.out.log && \
    chown -R root:root /var/log/redis && \
    chown -R root:root /var/run/redis && \
    chown -R root:root /data && \
    chmod 755 /var/run/redis && \
    chmod 755 /data

# Copy verification scripts
COPY verify_tensorflow.py /app/verify_tensorflow.py
COPY test_tensorflow_gpu.py /app/test_tensorflow_gpu.py
COPY test_tensorflow_gpu_direct.py /app/test_tensorflow_gpu_direct.py
RUN chmod +x /app/verify_tensorflow.py

# Expose ports
EXPOSE 8888 6379 9090 9121

# Start all services using supervisord
CMD ["/usr/bin/supervisord", "-c", "/etc/supervisor/supervisord.conf"]
